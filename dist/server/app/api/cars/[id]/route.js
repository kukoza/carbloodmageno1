(()=>{var e={};e.id=7499,e.ids=[7499],e.modules={13878:e=>{function r(e){var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=13878,e.exports=r},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},14300:e=>{"use strict";e.exports=require("buffer")},6113:e=>{"use strict";e.exports=require("crypto")},82361:e=>{"use strict";e.exports=require("events")},57147:e=>{"use strict";e.exports=require("fs")},73292:e=>{"use strict";e.exports=require("fs/promises")},41808:e=>{"use strict";e.exports=require("net")},71017:e=>{"use strict";e.exports=require("path")},77282:e=>{"use strict";e.exports=require("process")},12781:e=>{"use strict";e.exports=require("stream")},71576:e=>{"use strict";e.exports=require("string_decoder")},39512:e=>{"use strict";e.exports=require("timers")},24404:e=>{"use strict";e.exports=require("tls")},57310:e=>{"use strict";e.exports=require("url")},73837:e=>{"use strict";e.exports=require("util")},59796:e=>{"use strict";e.exports=require("zlib")},17373:(e,r,t)=>{"use strict";t.r(r),t.d(r,{headerHooks:()=>q,originalPathname:()=>N,patchFetch:()=>v,requestAsyncStorage:()=>y,routeModule:()=>x,serverHooks:()=>j,staticGenerationAsyncStorage:()=>w,staticGenerationBailout:()=>C});var o={};t.r(o),t.d(o,{DELETE:()=>h,GET:()=>m,PUT:()=>E});var s=t(95419),i=t(69108),a=t(99678),n=t(47033),c=t(78070),l=t(71017),u=t.n(l),d=t(57147),p=t(73292),f=t.n(p);let g=u().join(process.cwd(),"public/uploads/cars");async function m(e,{params:r}){try{let e=r.id,t=await (0,n.jB)(`
      SELECT id, name, type, licensePlate, status, initialMileage, currentMileage, 
             lastService, nextService, image, fileName, createdAt
      FROM Cars
      WHERE id = ?
      `,[e]);if(!t)return c.Z.json({error:"Car not found"},{status:404});return c.Z.json(t)}catch(e){return console.error("Error fetching car:",e),c.Z.json({error:"Failed to fetch car"},{status:500})}}async function E(e,{params:r}){try{let t=r.id,{name:o,type:s,licensePlate:i,status:a,currentMileage:l,image:p,fileName:m,oldFileName:E}=await e.json();if(console.log("Updating car:",t,"with image:",p?"Image provided":"No image","fileName:",m,"oldFileName:",E),!o||!s||!i)return c.Z.json({error:"Missing required fields"},{status:400});let h=await (0,n.jB)("SELECT id, image, fileName FROM Cars WHERE id = ?",[t]);if(!h)return c.Z.json({error:"Car not found"},{status:404});if(await (0,n.jB)("SELECT id FROM Cars WHERE licensePlate = ? AND id != ?",[i,t]))return c.Z.json({error:"License plate already exists on another car"},{status:409});let x=!1;if(h.fileName&&(m!==h.fileName||!m)){let e=u().join(g,h.fileName);if(console.log("Checking for old image to delete:",e),(0,d.existsSync)(e))try{await f().unlink(e),console.log("Successfully deleted old image file:",e),x=!0}catch(e){console.error("Error deleting old image file:",e)}else console.log("Old image file not found:",e)}return await (0,n.jB)(`
      UPDATE Cars
      SET name = ?, type = ?, licensePlate = ?, status = ?, currentMileage = ?, image = ?, fileName = ?
      WHERE id = ?
      `,[o,s,i,a,l,p,m,t]),c.Z.json({id:Number.parseInt(t),name:o,type:s,licensePlate:i,status:a,currentMileage:l,image:p,fileName:m,oldImageDeleted:x})}catch(e){return console.error("Error updating car:",e),c.Z.json({error:"Failed to update car"},{status:500})}}async function h(e,{params:r}){try{let e=r.id,t=await (0,n.jB)("SELECT id, image, fileName FROM Cars WHERE id = ?",[e]);if(!t)return c.Z.json({error:"Car not found"},{status:404});if(await (0,n.jB)("DELETE FROM Cars WHERE id = ?",[e]),t.fileName){let e=u().join(g,t.fileName);if(console.log("Attempting to delete image file:",e),(0,d.existsSync)(e))try{await f().unlink(e),console.log("Successfully deleted image file:",e)}catch(e){console.error("Error deleting image file:",e)}else console.log("Image file not found:",e)}else console.log("No fileName found for car:",e);return c.Z.json({success:!0})}catch(e){return console.error("Error deleting car:",e),c.Z.json({error:"Failed to delete car"},{status:500})}}let x=new s.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/cars/[id]/route",pathname:"/api/cars/[id]",filename:"route",bundlePath:"app/api/cars/[id]/route"},resolvedPagePath:"C:\\xampp\\htdocs\\car-booking-system-110\\car-booking-system-110\\app\\api\\cars\\[id]\\route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:y,staticGenerationAsyncStorage:w,serverHooks:j,headerHooks:q,staticGenerationBailout:C}=x,N="/api/cars/[id]/route";function v(){return(0,a.patchFetch)({serverHooks:j,staticGenerationAsyncStorage:w})}},47033:(e,r,t)=>{"use strict";t.d(r,{Fm:()=>l,JT:()=>n,jB:()=>c});var o=t(63069);let s={host:"43.229.132.209",user:process.env.DB_USER||"rootforbook",password:process.env.DB_PASSWORD||"534jj7?cA",database:process.env.DB_NAME||"carbookingsystem",waitForConnections:!0,connectionLimit:10,queueLimit:0},i=null;async function a(){if(!i)try{console.log("Creating database pool with config:",{host:s.host,user:s.user,database:s.database}),i=o.createPool(s),(await i.getConnection()).release(),console.log("Database pool created and tested successfully")}catch(e){throw console.error("Error creating database pool:",e),Error(`Database connection failed: ${e instanceof Error?e.message:String(e)}`)}return i}async function n(e,r=[]){try{let t=await a();console.log("Executing query:",e,"with params:",r);let[o]=await t.execute(e,r);return{recordset:o}}catch(e){throw console.error("Query execution error:",e),e}}async function c(e,r=[]){try{let{recordset:t}=await n(e,r);return t.length>0?t[0]:null}catch(e){throw console.error("Query execution error:",e),e}}async function l(e,r=[]){try{let t=await a();console.log("Executing insert:",e,"with params:",r);let[o]=await t.execute(e,r);return{insertId:o.insertId}}catch(e){throw console.error("Insert execution error:",e),e}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[1638,6206,3069],()=>t(17373));module.exports=o})();