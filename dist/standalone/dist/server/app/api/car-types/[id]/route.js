(()=>{var e={};e.id=4964,e.ids=[4964],e.modules={13878:e=>{function r(e){var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=13878,e.exports=r},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},14300:e=>{"use strict";e.exports=require("buffer")},6113:e=>{"use strict";e.exports=require("crypto")},82361:e=>{"use strict";e.exports=require("events")},41808:e=>{"use strict";e.exports=require("net")},77282:e=>{"use strict";e.exports=require("process")},12781:e=>{"use strict";e.exports=require("stream")},71576:e=>{"use strict";e.exports=require("string_decoder")},39512:e=>{"use strict";e.exports=require("timers")},24404:e=>{"use strict";e.exports=require("tls")},57310:e=>{"use strict";e.exports=require("url")},73837:e=>{"use strict";e.exports=require("util")},59796:e=>{"use strict";e.exports=require("zlib")},54075:(e,r,t)=>{"use strict";t.r(r),t.d(r,{headerHooks:()=>h,originalPathname:()=>x,patchFetch:()=>g,requestAsyncStorage:()=>y,routeModule:()=>l,serverHooks:()=>f,staticGenerationAsyncStorage:()=>E,staticGenerationBailout:()=>C});var s={};t.r(s),t.d(s,{DELETE:()=>d,GET:()=>u,PUT:()=>p});var o=t(95419),a=t(69108),i=t(99678),n=t(47033),c=t(78070);async function u(e,{params:r}){try{let e=r.id,t=await (0,n.jB)(`
      SELECT id, name, description, capacity, createdAt
      FROM CarTypes
      WHERE id = ?
      `,[e]);if(!t)return c.Z.json({error:"Car type not found"},{status:404});return c.Z.json(t)}catch(e){return console.error("Error fetching car type:",e),c.Z.json({error:"Failed to fetch car type"},{status:500})}}async function p(e,{params:r}){try{let t=r.id,{name:s,description:o,capacity:a}=await e.json();if(!s||!o||!a)return c.Z.json({error:"Missing required fields"},{status:400});if(!await (0,n.jB)("SELECT id FROM CarTypes WHERE id = ?",[t]))return c.Z.json({error:"Car type not found"},{status:404});if(await (0,n.jB)("SELECT id FROM CarTypes WHERE name = ? AND id != ?",[s,t]))return c.Z.json({error:"Car type name already exists"},{status:409});await (0,n.jB)(`
      UPDATE CarTypes
      SET name = ?, description = ?, capacity = ?
      WHERE id = ?
      `,[s,o,a,t]);let i=await (0,n.jB)(`
      SELECT id, name, description, capacity, createdAt
      FROM CarTypes
      WHERE id = ?
      `,[t]);return c.Z.json(i)}catch(e){return console.error("Error updating car type:",e),c.Z.json({error:"Failed to update car type"},{status:500})}}async function d(e,{params:r}){try{let e=r.id;if(!await (0,n.jB)("SELECT id FROM CarTypes WHERE id = ?",[e]))return c.Z.json({error:"Car type not found"},{status:404});if((await (0,n.jB)("SELECT COUNT(*) as count FROM Cars WHERE type = (SELECT name FROM CarTypes WHERE id = ?)",[e])).count>0)return c.Z.json({error:"Cannot delete car type that is in use"},{status:400});return await (0,n.jB)("DELETE FROM CarTypes WHERE id = ?",[e]),c.Z.json({success:!0})}catch(e){return console.error("Error deleting car type:",e),c.Z.json({error:"Failed to delete car type"},{status:500})}}let l=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/car-types/[id]/route",pathname:"/api/car-types/[id]",filename:"route",bundlePath:"app/api/car-types/[id]/route"},resolvedPagePath:"C:\\xampp\\htdocs\\car-booking-system-110\\car-booking-system-110\\app\\api\\car-types\\[id]\\route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:y,staticGenerationAsyncStorage:E,serverHooks:f,headerHooks:h,staticGenerationBailout:C}=l,x="/api/car-types/[id]/route";function g(){return(0,i.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:E})}},47033:(e,r,t)=>{"use strict";t.d(r,{Fm:()=>u,JT:()=>n,jB:()=>c});var s=t(63069);let o={host:"43.229.132.209",user:process.env.DB_USER||"rootforbook",password:process.env.DB_PASSWORD||"534jj7?cA",database:process.env.DB_NAME||"carbookingsystem",waitForConnections:!0,connectionLimit:10,queueLimit:0},a=null;async function i(){if(!a)try{console.log("Creating database pool with config:",{host:o.host,user:o.user,database:o.database}),a=s.createPool(o),(await a.getConnection()).release(),console.log("Database pool created and tested successfully")}catch(e){throw console.error("Error creating database pool:",e),Error(`Database connection failed: ${e instanceof Error?e.message:String(e)}`)}return a}async function n(e,r=[]){try{let t=await i();console.log("Executing query:",e,"with params:",r);let[s]=await t.execute(e,r);return{recordset:s}}catch(e){throw console.error("Query execution error:",e),e}}async function c(e,r=[]){try{let{recordset:t}=await n(e,r);return t.length>0?t[0]:null}catch(e){throw console.error("Query execution error:",e),e}}async function u(e,r=[]){try{let t=await i();console.log("Executing insert:",e,"with params:",r);let[s]=await t.execute(e,r);return{insertId:s.insertId}}catch(e){throw console.error("Insert execution error:",e),e}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[1638,6206,3069],()=>t(54075));module.exports=s})();