(()=>{var e={};e.id=5612,e.ids=[5612],e.modules={13878:e=>{function r(e){var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=13878,e.exports=r},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},14300:e=>{"use strict";e.exports=require("buffer")},6113:e=>{"use strict";e.exports=require("crypto")},82361:e=>{"use strict";e.exports=require("events")},41808:e=>{"use strict";e.exports=require("net")},77282:e=>{"use strict";e.exports=require("process")},12781:e=>{"use strict";e.exports=require("stream")},71576:e=>{"use strict";e.exports=require("string_decoder")},39512:e=>{"use strict";e.exports=require("timers")},24404:e=>{"use strict";e.exports=require("tls")},57310:e=>{"use strict";e.exports=require("url")},73837:e=>{"use strict";e.exports=require("util")},59796:e=>{"use strict";e.exports=require("zlib")},81275:(e,r,t)=>{"use strict";t.r(r),t.d(r,{headerHooks:()=>x,originalPathname:()=>g,patchFetch:()=>v,requestAsyncStorage:()=>d,routeModule:()=>l,serverHooks:()=>m,staticGenerationAsyncStorage:()=>p,staticGenerationBailout:()=>h});var o={};t.r(o),t.d(o,{GET:()=>c});var s=t(95419),a=t(69108),n=t(99678),u=t(47033),i=t(78070);async function c(){try{if((await (0,u.JT)(`
      SELECT COUNT(*) as count
      FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_NAME = 'Users'
      AND COLUMN_NAME = 'avatar_url'
      `,[])).recordset[0].count>0)return i.Z.json({message:"Column avatar_url already exists in Users table"});return await (0,u.JT)(`
        ALTER TABLE Users ADD avatar_url NVARCHAR(255) NULL
        `,[]),i.Z.json({message:"Column avatar_url added successfully"})}catch(e){return console.error("Error:",e),i.Z.json({error:"Failed to add avatar_url column"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/db-update/avatar-column/route",pathname:"/api/db-update/avatar-column",filename:"route",bundlePath:"app/api/db-update/avatar-column/route"},resolvedPagePath:"C:\\xampp\\htdocs\\car-booking-system-110\\car-booking-system-110\\app\\api\\db-update\\avatar-column\\route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:d,staticGenerationAsyncStorage:p,serverHooks:m,headerHooks:x,staticGenerationBailout:h}=l,g="/api/db-update/avatar-column/route";function v(){return(0,n.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:p})}},47033:(e,r,t)=>{"use strict";t.d(r,{Fm:()=>c,JT:()=>u,jB:()=>i});var o=t(63069);let s={host:"43.229.132.209",user:process.env.DB_USER||"rootforbook",password:process.env.DB_PASSWORD||"534jj7?cA",database:process.env.DB_NAME||"carbookingsystem",waitForConnections:!0,connectionLimit:10,queueLimit:0},a=null;async function n(){if(!a)try{console.log("Creating database pool with config:",{host:s.host,user:s.user,database:s.database}),a=o.createPool(s),(await a.getConnection()).release(),console.log("Database pool created and tested successfully")}catch(e){throw console.error("Error creating database pool:",e),Error(`Database connection failed: ${e instanceof Error?e.message:String(e)}`)}return a}async function u(e,r=[]){try{let t=await n();console.log("Executing query:",e,"with params:",r);let[o]=await t.execute(e,r);return{recordset:o}}catch(e){throw console.error("Query execution error:",e),e}}async function i(e,r=[]){try{let{recordset:t}=await u(e,r);return t.length>0?t[0]:null}catch(e){throw console.error("Query execution error:",e),e}}async function c(e,r=[]){try{let t=await n();console.log("Executing insert:",e,"with params:",r);let[o]=await t.execute(e,r);return{insertId:o.insertId}}catch(e){throw console.error("Insert execution error:",e),e}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[1638,6206,3069],()=>t(81275));module.exports=o})();